from flask import Blueprint, jsonify, request
from logic.orderLogic import orderLogic
import pdb
orderBP = Blueprint('orders', __name__)

@orderBP.route("/api/orders/", methods = ["GET"])
def listOrders():
  """
  Retrieve Orders.
  get all orders stored
  ---
  tags:
    - Orders
  responses:
    200:
      description: A json of orders.
      schema:
        id: get_all_orders
        type: array
        items:
          type: object
          properties:
            _id:
              type: string
              description: Id auto generated
              default: 0
            customer_name:
              type: string
              description: Name of the customer
              default: Pancho Pantera
            status:
              type: array
              description: Status of the Order
              default: [inProgress, Done, Delivered]
              items:
                type: string
    500:
      description: Server error.
    """
  try:
    return orderLogic.listOrders()
  except Exception as e:
    return 'Error:orderController:listOrders', 500

@orderBP.route("/api/orders/", methods = ["POST"])
def createOrder():
  """
  Create Order
  Create anre order in default status inProgress
  ---
  tags:
    - Orders
  parameters:
    - in: body
      name: body
      schema:
        id: create_order_query
        required:
          - _id
          - status
        properties:
            customer_name:
              type: string
              description: Name of the customer
              default: Pancho Pantera
            status:
              type: string
              description: Status of the Order
              default: Done
  responses:
    200:
      description: A json of orders.
      schema:
        id: create_orders
        properties:
          Message:
            type: string
            description: Name of the customer
            default: Order created successfully!
          id:
            type: string
            description: Id auto generated
            default: 0
    500:
      description: Server error.
  """

  try:
    body = request.get_json()
    return orderLogic.createOrder(body)
  except Exception as e:
    return jsonify({"Error": str(e)}), 500

@orderBP.route("/api/orders/<string:order_id>", methods = ["GET"])
def getOrderByID(order_id):
  """
  Get order by Id
  Retrieve just one order using the _id as reference
  ---
  tags:
    - Orders
  parameters:
    - in: path
      name: order_id
      required: true
      description: Id generated by mongoDb
      default: it must be a 12-byte input or a 24-character hex string
      type: string
  responses:
      200:
        description: An updated order 
        schema:
          id: update_order_by_id
          properties:
            _id:
              type: string
              description: The id of mongoDb
              default: 0
            customer_name:
              type: string
              description: customer name
              default: random name
            status:
              type: array
              description: Status of the Order
              default: [inProgress, Done, Delivered]
              items:
                type: string
      500:
        description: Server error.
  """
  try:
    return orderLogic.getOrderByID(order_id)
  except Exception as e:
    return jsonify({"Error": str(e)}), 500

@orderBP.route("/api/orders/<string:order_id>", methods = ["PATCH"])
def updateOrderByID(order_id):
  """
    Update order by Id
    Update order using id as reference
    ---
    tags:
      - Orders
    parameters:
      - name: order_id
        in: path
        description: Id generated by mongoDb
        required: true
        type: string
        default: it must be a 12-byte input or a 24-character hex string
      - in: body
        name: body
        schema:
          id: updateOrderByID
          required:
            - status
          properties:
            customer_name:
              type: integer
              description: Customer name updated
              default: Pancho Pantera Updated
            status:
              type: integer
              description: Status of the Order
              default: Done
    responses:
      200:
        description: An updated order 
        schema:
          id: update_order_by_id
          properties:
            _id:
              type: string
              description: The id of mongoDb
              default: 0
            customer_name:
              type: string
              description: customer name
              default: random name
            status:
              type: array
              description: Status of the Order
              default: [inProgress, Done, Delivered]
              items:
                type: string
      500:
        description: Server error.
    """
  try:
    body = request.get_json()
    return orderLogic.updateOrderByID(order_id, body)
  except Exception as e:
    return jsonify({"Error": str(e)}), 500

@orderBP.route("/api/orders/<string:order_id>", methods = ["DELETE"])
def deleteOrderByID(order_id):
  """
  Delete order by Id
  Delete just one order using the _id as reference
  ---
  tags:
    - Orders
  parameters:
    - in: path
      name: order_id
      required: true
      description: Id generated by mongoDb
      default: it must be a 12-byte input or a 24-character hex string
      type: string
  responses:
      200:
        description: Delete an order 
        schema:
          id: update_order_by_id
          properties:
            Message:
              type: string
              description: Delete an order by Id
              default: Order deleted successfully
      500:
        description: Server error.
  """
  try:
    return orderLogic.deleteOrderByID(order_id)
  except Exception as e:
    return jsonify({"Error": str(e)}), 500